/// solve it logically first
// then code

ALGORITHM
  - define function `differenceOfTwo`
  - give it a parameter called `array`
  - declare a variable called `returnArr` and initialize it to an empty array
  - if `array.length` is less than 2, return `returnArr`
  - loop through the array represented by the parameter name `array`, selecting the first number
    - have a nested loop that loops through the array, checking to see if 
      each number is equal to the element - 2 or the element + 2
      e.g. if (array[i] === array[j] + 2 || array[i] === array[j] - 2) 
      - if a match is found, add the number from the first loop and the matching 
        number from the second loop to an array and add it to our variable `returnArr`.
  - once all the numbers have been looped thorough and no more matches are found,
    sort the numbers in each array with the smallest first
  - sort the nested arrays based on ascending order of the first element of the array
  - return `returnArr`.


Math.abs reutn absolute diference of two


/*
Problem Description
 Write a function to find the longest common prefix string amongst an array of strings.

 If there is no common prefix, return an empty string "".

 Example 1:
Input: ["flower","flow","flight"]
Output: "fl"

Example 2:
Input: ["dog","racecar","car"]
Output: ""
Explanation: There is no common prefix among the input strings.

Note:
All given inputs are in lowercase letters a-z.

*/

// Test Cases
 console.log(commonPrefix(["flower","flow","flight"]) === "fl"); // true
 console.log(commonPrefix(["dog","racecar","car"])  === ""); // true
 console.log(commonPrefix(["interspecies","interstellar","interstate"])  === "inters"); // true
 console.log(commonPrefix(["throne","dungeon"]) === ""); // true
 console.log(commonPrefix(["throne","throne"]) === "throne"); // true




/*Problem Description
You are going to be given an array of integers. Your job is to take that array and find an index N where the sum of the integers to the left of N is equal to the sum of the integers to the right of N. If there is no index that would make this happen, return -1.

For example:
Let's say you are given the array [1, 2, 3, 4, 3, 2, 1]:
Your function will return the index 3, because at the 3rd position of the array, the sum of left side of the index [1, 2, 3] and the sum of the right side of the index [3, 2, 1] both equal 6.

Another one:
You are given the array [20, 10, -80, 10, 10, 15, 35]
At index 0 the left side is []
The right side is [10, -80, 10, 10, 15, 35]
They both are equal to 0 when added. (Empty arrays are equal to 0 in this problem)
Index 0 is the place where the left side and right side are equal.

Test Cases
*/

console.log(findEvenIndex([1,2,3,4,3,2,1]) === 3); // true
console.log(findEvenIndex([1,100,50,-51,1,1]) === 1); // true
console.log(findEvenIndex([1,2,3,4,5,6]) === -1); // true
console.log(findEvenIndex([20,10,30,10,10,15,35]) === 3); // true
console.log(findEvenIndex([20,10,-80,10,10,15,35]) === 0); // true
console.log(findEvenIndex([10,-80,10,10,15,35,20]) === 6); // true
console.log(findEvenIndex([-1,-2,-3,-4,-3,-2,-1]) === 3); // true
